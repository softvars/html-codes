function createCKEditor(element){
    var editor = CKEDITOR.instances[element];
    if(editor){
        CKEDITOR.instances[element].destroy()
    }
    CKEDITOR.replace(element);
    CKEDITOR.config.width = "95%";
    CKEDITOR.config.height = "450px";

}

function readCKEditor(element){
    return CKEDITOR.instances[element].getData();
}

function createTinyMceEditor(element){
    tinyMCE.remove()
    tinymce.init({
        selector: '#'+element,
        color_picker_callback: function(callback, value) {
            callback('#FF00FF');
        },
        width : '95%',
        height : 450,
        plugins: [
            'advlist autolink lists link image charmap print preview hr anchor pagebreak',
            'searchreplace wordcount visualblocks visualchars code fullscreen',
            'insertdatetime media nonbreaking save table contextmenu directionality',
            'emoticons template paste textcolor colorpicker textpattern imagetools responsivefilemanager' //responsivefilemanager to upload a file
        ],
        toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | responsivefilemanager |',
        toolbar2: 'print preview media | forecolor backcolor emoticons',
        image_advtab: false,
        file_browser_callback : 'myFileBrowser',
        file_browser_callback_types: 'file image media',
        external_filemanager_path:"http://localhost:1001/",
        filemanager_title:"Responsive Filemanager" ,
        /*external_plugins: {
            "filemanager": "/libs/tinymce/js/tinymce/plugins/responsivefilemanager/plugin.min.js"
        }*/

    });
}

function readTinyMceEditor(element){
    return tinymce.get(element).getContent();
}

function httpPost(data){
    data.$http.post(data.url, data.postParam,data.onSucess,data.onError);
}

var app = angular.module('acolApp', ['smart-table','ngAnimate', 'ui.bootstrap','ngRoute', 'dndLists']);
var serviceUrl = location.protocol+"//"+location.hostname+":8080";
app.run(function ($rootScope, $http) {
    $rootScope.productCollection = [];
    /*$rootScope.productCollection = [
        {"id":1100,"prodCode":"WEBSELLA2","name":"WebSella2","version":"0.1.ALPHA","descr":"","favorite":0,"numSteps":4,"templateCode":null,"createUser":"User","createDate":1451562186556,"updateDate":1451562186556,"updateUser":"User","properties":[{"id":50,"value":"TestValue1","code":"TestCode1","prod":"WEBSELLA"}],"releases":[],"steps":"6"},
        {"id":1101,"prodCode":"WEBSELLA1","name":"WebSella1","version":"0.1.ALPHA","descr":"","favorite":2,"numSteps":5,"templateCode":null,"createUser":"User","createDate":1451562186556,"updateDate":1451562186556,"updateUser":"User","properties":[{"id":50,"value":"TestValue1","code":"TestCode1","prod":"WEBSELLA"}],"releases":[],"steps":""},
        {"id":1102,"prodCode":"WEBSELLA3","name":"WebSella3","version":"0.1.ALPHA","descr":"","favorite":3,"numSteps":6,"templateCode":null,"createUser":"User","createDate":1451562186556,"updateDate":1451562186556,"updateUser":"User","properties":[{"id":50,"value":"TestValue1","code":"TestCode1","prod":"WEBSELLA"}],"releases":[],"steps":""},
        {"id":1103,"prodCode":"WEBSELLA4","name":"WebSella4","version":"0.1.ALPHA","descr":"","favorite":5,"numSteps":3,"templateCode":null,"createUser":"User","createDate":1451562186556,"updateDate":1451562186556,"updateUser":"User","properties":[{"id":50,"value":"TestValue1","code":"TestCode1","prod":"WEBSELLA"}],"releases":[],"steps":""}];*/
    

    $rootScope.initDone = false;
    $rootScope.loadProductList = function(){
        $http({
          method: 'GET',
          url: serviceUrl+'/mock/productList.json'
        }).then(function successCallback(response) {
            var data = response.data;
            if(data) {
                $rootScope.productCollection = angular.isArray(data) ? data : [data];
                $rootScope.initDone = true;
            }
        });
    };
    $rootScope.loadProductList();
    
    $rootScope.saveProductList = function(){
        $http({
          method: 'PUT',
          data: $rootScope.productCollectionAsJson,
          headers: {'Content-Type': 'application/json;charset=UTF-8',"Access-Control-Allow-Origin":"*" },
          url: '/mock/productList.json'
        }).then(function successCallback(response) {
            console.log("response :" + response);
        });
    };

    
    $rootScope.$watch('productCollection', function(productCollection) {
        $rootScope.productCollectionAsJson = angular.toJson(productCollection, true);
        if($rootScope.initDone) {
            $rootScope.saveProductList();
        }
    }, true);

$rootScope.currentStep=0;
$rootScope.selectedData ={};
$rootScope.models = {
        selected: null,
        product_allowed_types: ["widget"],
        product_steps: [],
        lists: {},
        wlist:[],
       
         
};
$rootScope.categories=["A","B"]
$rootScope.widgetImages=[
                        {name:"Nome e Cognome",img:"nome_cognome",catId:"A"},
                        {name:"Codice promozionale",img:"codice_promo",catId:"A"},
                        {name:"Codice fiscale ",img:"cod_fiscale",catId:"A"},
                        {name:"Email",img:"email",catId:"B"},
                        {name:"Cittadinanza",img:"city",catId:"B"},
                        
                ];
$rootScope.createWidgetData = function(){
    var widgetImg = $rootScope.widgetImages;
    var widgetCat= $rootScope.categories;
    for(var j=0;j<widgetCat.length;j++){
         var wCat = widgetCat[j];
        $rootScope.models.lists[wCat]=[];
        for (var i = 0; i < widgetImg.length; i++) {
            var widgetId = widgetImg[i].img;
            var categoryId = widgetCat[j]+"_"+widgetId;
            var imgUrl = "source/images/"+widgetId+".JPG"
           if(widgetImg[i].catId==wCat){
            $rootScope.models.lists[wCat].push({id:widgetId, type:"widget", catId:categoryId + i, 
                                                    label: widgetImg[i].name,url:imgUrl});
           }
          
        }
    }
};
    $rootScope.createWidgetData();
$rootScope.createDataJson = function(obj){
   
        var index = $rootScope.productCollection.length-1;
        var selData = $rootScope.productCollection[index];
    
        var dataObj={};
        dataObj.id =obj.id || selData&& selData.id && (selData.id)+1||'';
        dataObj.prodCode = obj.prodCode || '';
        dataObj.name=obj.name||'';
        dataObj.version=obj.version||'';
        dataObj.descr = obj.descr ||'';
        dataObj.favorite = obj.favorite ||'';
        dataObj.numSteps = obj.numSteps ||'';
        dataObj.templateCode =obj.templateCode ||'';
        dataObj.createUser =obj.createUser||'';
        dataObj.createDate =obj.createDate ||'';
        dataObj.updateDate = obj.updateDate ||'';
        dataObj.updateUser =obj.updateUser ||'';
        dataObj.properties = obj.properties||[];
        dataObj.releases =obj.releases||[];
        dataObj.steps = obj.steps ||'';
        return dataObj;
        
    };
   
        /*$rootScope.models.images.push({name:"name_cogname",url:"source/images/nome_cognome.JPG"});
        $rootScope.models.images.push({name:"cod_fiscale",url:"source/images/cod_fiscale.JPG"});*/
   
    $rootScope.getSelectedData = function(isNew){
        var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
          if(prevSelect.length == 0 && !isNew &&  $rootScope.selectedData){
              return  $rootScope.selectedData;
          }
        var index = prevSelect.attr("idx");
        var obj = {};
          if(isNew){
              index = $rootScope.productCollection.length-1;
              
          }
          obj={'idx':index,'data':$rootScope.productCollection[index]}
        if (index && index !== -1) {
            $rootScope.selectedData =obj;
        return obj;}else{return false;}
    }
    $rootScope.go = function(path){
       location.href="#"+path;
    }
    $rootScope.setCurrentStep = function(step){
        $rootScope.currentStep = step;
    }
     $rootScope.getCurrentStep = function(){
        return($rootScope.currentStep);
    }
    $rootScope.proceedStep = function(id,srcpath,isView) {
        $rootScope.isView = location.hash.indexOf("viewWidgets")!=-1 || isView;
        var selectData = $rootScope.getSelectedData() && $rootScope.getSelectedData().data || null;
        var id = id || selectData && selectData.id ||'';
        var path = '';
        if(srcpath){
        path = id && srcpath && srcpath+id ||srcpath
        }else{
        path = id && (location.hash.indexOf("viewWidgets")!=-1  && "/viewWidgets/"+id || location.hash.indexOf("editWidgets")!=-1 &&                      "/editWidgets/"+id )||"/addWidgets" ||'';
        path = isView && "/viewWidgets/"+id||path;}
       $rootScope.go(path +'/step:'+$rootScope.getCurrentStep());
    }
    
 
});

app.config([ '$routeProvider', function($routeProvider) {
	$routeProvider.
    when('/', {
		templateUrl : 'source/templates/temp_products_visualiza.html',
		controller : 'productsCtrl'
	}).
	when('/addProduct', {
		templateUrl : 'source/templates/temp_new_product.html',
		controller : 'addProductCtrl'
	}).
    when('/editWidgets/:productId/step:currentStep', {
        templateUrl: 'source/templates/product_widgets.html',
        controller: 'addWidgetsForproductCtrl'
     
    }).
	when('/addWidgets/step:currentStep', {
		templateUrl : 'source/templates/product_widgets.html',
		controller : 'addWidgetsForproductCtrl'
	}).
      when('/viewWidgets/:productId/step:currentStep', {
        templateUrl: 'source/templates/product_widgets.html',
        controller: 'addWidgetsForproductCtrl'
     
    }).
	when('/ckeditor', {
        templateUrl: 'acol/app/templates/ckeditorTemplate.html',
        controller: 'htmlEditorController'
    }).
    when('/tinemceeditor', {
        templateUrl: 'acol/app/templates/tinymceeditorTemplate.html',
        controller: 'htmlEditorController'
    }).
	otherwise({
		redirectTo : '/'
	});
} ]);
app.controller('addProductCtrl', function ($scope, $rootScope) {
    $scope.getElement =function(id){return angular.element(document.getElementById(id))};
    $scope.enableConfirm = false;
    $scope.doConfirm = function(){
        
        var prodCode=$scope.getElement('prodCode').val();
        var name=$scope.getElement('name').val();
        var descr=$scope.getElement('descr').val();
        var numSteps=$scope.getElement('numberofSteps').val();
        var templateCode=$scope.getElement('templateCode').val();
        var postObj = {"prodCode":prodCode,"name":name,"descr":descr,"numSteps":numSteps,"templateCode":templateCode}
        $scope.productCollection.push($scope.createDataJson(postObj));
        $scope.setCurrentStep(1);
        $scope.proceedStep()
       
    };
    
});
app.controller('pdtPropertyCtrl', function ($scope, $uibModal, $log) {

 /* $scope.items = [];

  $scope.addProductProperty = function (pdtId) {
  $scope.pdtId = pdtId;
    var modalInstance = $uibModal.open({
     
      templateUrl: 'source/templates/templ_product_property.html',
      controller: 'ModalInstanceCtrl',
      resolve: {
        pdtId: function () {
          return $scope.pdtId;
        }
      }
    });

    modalInstance.result.then(function (isDone) {
      $scope.isDone = isDone;
    }, function () {
      $log.info('Modal dismissed at: ' + new Date());
    });
  };
*/


});



/*app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance, items) {

  $scope.doClkPropertyConfirm = function () {
    $uibModalInstance.close(true);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
});*/
app.controller('productsCtrl', ['$scope', function ($scope,$rootScope) {
    $scope.enable_button=false;
    $scope.doRemoveItem = function() {
        var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
        var index = prevSelect.attr("idx");
        if (index && index !== -1) {
            $scope.productCollection.splice(index, 1);
            prevSelect.removeClass("stSelected");
            prevSelect.removeAttr("idx");
             $scope.enable_button=false;
        }
    };
    $scope.doAddDublicate = function() {
        var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
        var index = prevSelect.attr("idx");
        if (index && index !== -1) {
            $scope.productCollection.push($scope.productCollection[index]);
        }
    };

    $scope.setselectedData = function(data){
          var idx= $scope.productCollection.indexOf(data);
          var elt =event.currentTarget;
          var angElt =angular.element(elt)
          var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
           prevSelect.removeClass("stSelected");
           prevSelect.removeAttr("idx");
           if(!angElt.hasClass("stSelected")){
               angElt.addClass("stSelected");
               angElt.attr("idx",idx);
                $scope.enable_button=true;
           }
    };
  
    $scope.go = function(path){
       location.href="#"+path;
    };

    $scope.doModifyItem = function(){
        var selectedPrdtData = $scope.getSelectedData()
        if(selectedPrdtData && selectedPrdtData.idx){
            $scope.setCurrentStep(1);
            $scope.proceedStep(selectedPrdtData.data.id,"/editWidgets/");
        }
    };

    $scope.doOpenItem = function(data){
        if(data) {
            $scope.setselectedData(data);
            $scope.setCurrentStep(1);
            $scope.proceedStep(data.id, "/viewWidgets/", true);

        } else {
            var selectedPrdtData = $scope.getSelectedData()
            if(selectedPrdtData && selectedPrdtData.idx){
                $scope.setCurrentStep(1);
                $scope.proceedStep(selectedPrdtData.data.id, "/viewWidgets/", true);
            }
        }
    };

}]);
app.controller("addWidgetsForproductCtrl", function($scope, $uibModal) {
    
    var isAdd = location.href.indexOf("addWidgets") !== -1;
    $scope.isEnableNext=false;$scope.isEnableSave=true;
    $scope.selectedData= $scope.getSelectedData(isAdd);
    $scope.selectedData.currentStep = $scope.getCurrentStep();
        
    $scope.doNextClick = function(currentStep){
        $scope.setCurrentStep($scope.getCurrentStep()+1);
        $scope.proceedStep($scope.selectedData.data.id);
         $scope.isEnableNext =  $scope.isEnableNext;
    };
    
    $scope.doPreviousClick = function(currentStep){
         $scope.setCurrentStep($scope.getCurrentStep()-1);
         $scope.proceedStep($scope.selectedData.data.id);
    
    };
    
    $scope.doSaveClick = function(){
        $scope.setSelectedWidgets();
      
        if($scope.selectedData.data.numSteps>$scope.getCurrentStep()){
            $scope.setCurrentStep($scope.getCurrentStep()+1);
            $scope.proceedStep($scope.selectedData.data.id); 
            $scope.isEnableNext=true;
        }
        else{
            $scope.isEnableNext=false;
            $scope.isEnableSave=false;
            $scope.go('/');
        }
    };
    
    $scope.doCancel = function(){
        $scope.models.product_steps =[];
        $scope.setSelectedWidgets();
    };
    
    $scope.getSelectedWidgets = function(){
        var selectedwidgets = [];
        var widgetsForStep = $scope.selectedData.data["widgetsForStep"];
        if(widgetsForStep) {
            selectedwidgets =  widgetsForStep[$scope.selectedData.currentStep];
        }
        return (angular.isArray(selectedwidgets) ? selectedwidgets : []);
    };
     
    $scope.setSelectedWidgets = function(){
        var widgetsForStep =  $scope.productCollection[$scope.selectedData.idx]["widgetsForStep"];
        if(!widgetsForStep) {
            $scope.productCollection[$scope.selectedData.idx].widgetsForStep = {};
        }
        $scope.productCollection[$scope.selectedData.idx].widgetsForStep[$scope.selectedData.currentStep] = $scope.models.product_steps;
    };
        
    $scope.models.product_steps = $scope.getSelectedWidgets();
    
    $scope.containsObject = function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (angular.equals(list[i], obj)) {
                return true;
            }
        }
        return false;
    };
        
    $scope.dropCallback = function(event, index, item, external, type, allowedTypes) {
/*        if($scope.models.product_steps.length){
            if($scope.containsObject(item, $scope.models.product_steps)){
                return false;
            }
        }
        */
        return item;
    };
    $scope.isWidgetAdded = function(item) {
        if(item) {
            var list = $scope.models.product_steps;
            if(list && list.length){
                for (i = 0; i < list.length; i++) {
                    if (list[i] && list[i].id === item.id) {
                        item["isDisabled"] = true;
                        return true;
                    } else {
                        item["isDisabled"] = false;
                    }
                }
            }
        }
        return false;
    };
    
  $scope.animationsEnabled = true;
  $scope.isDone = false;
  $scope.pdtId = '';
  $scope.addProductProperty = function (widget) {
    $scope.pdtId =event.currentTarget.id;
    var modalInstance = $uibModal.open({
      animation: $scope.animationsEnabled,
      templateUrl: 'source/templates/templ_product_property.html',
      controller: 'ModalInstanceCtrl',
      resolve: {
        pdtId: function () {
          return $scope.pdtId;
        }
      }
    });

    modalInstance.result.then(function (pdtId) {
       widget.isDone = true;
    }, function () {
     console.log("close");
    });
  };

  $scope.toggleAnimation = function () {
    $scope.animationsEnabled = !$scope.animationsEnabled;
  };

    
});
  app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance,pdtId) {
      $scope.pdtId = pdtId;
    $scope.doClkPropertyConfirm = function (pdtId) {
      $uibModalInstance.close($scope.pdtId);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
    });


app.controller("htmlEditorController",['$scope','$http', function($scope,$http) {
    $scope.storeCKEditor = function(element){
        var postParam = {htmlContent : readCKEditor(element)};
        var onSuccess = function(response){
            console.log("response ",response);
        };
        var onError = function(error){
            console.log("error ",error);modes
        };
        var data = {$http:$http,url:"",postParam:postParam,onSuccess:onSuccess,onError:onError};
        httpPost(data);
    }
    $scope.storeTinymceEditor = function(element){
        var postParam = {htmlContent : readTinyMceEditor(element)};
        var onSuccess = function(response){
            console.log("response ",response);
        };
        var onError = function(error){
            console.log("error ",error);modes
        };
        var data = {$http:$http,url:"",postParam:postParam,onSuccess:onSuccess,onError:onError};
        httpPost(data);
    }
}]);

/*
app.config(['$routeProvider',
                    function($routeProvider) {
                        $routeProvider.
                        when('/ckeditor', {
                            templateUrl: 'acol/app/templates/ckeditorTemplate.html',
                            controller: 'htmlEditorController'
                        }).
                        when('/tinemceeditor', {
                            templateUrl: 'acol/app/templates/tinymceeditorTemplate.html',
                            controller: 'htmlEditorController'
                        }).
                        otherwise({
                            redirectTo: '/ckeditor'
                        });
                    }]);
*/


app.directive('ckEditor', function() {
    return {
        restrict: 'E',
        replace: true,
        transclude: true,
        controller: 'htmlEditorController',
        compile: function(element, attrs) {
            var editorHTML = '<textarea name="'+attrs.type+'" id="'+attrs.type+'"></textarea>';
            element.replaceWith(editorHTML);
            createCKEditor(attrs.type);
        }
    };
});

app.directive('tinymceEditor', function() {
    return {
        restrict: 'E',
        controller: 'htmlEditorController',
        compile: function(element, attrs) {
            var editorHTML = '<textarea name="'+attrs.type+'" id="'+attrs.type+'"></textarea>';
            element.replaceWith(editorHTML);
            createTinyMceEditor(attrs.type);

        }
    };
});

