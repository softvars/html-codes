var app = angular.module('acolApp', ['datatables','ngAnimate', 'ui.bootstrap','ngRoute', 'dndLists']);


function createCKEditor(element){
    var editor = CKEDITOR.instances[element];
    if(editor){
        CKEDITOR.instances[element].destroy()
    }
    CKEDITOR.replace(element);
    CKEDITOR.config.width = "95%";
    CKEDITOR.config.height = "450px";

}

function readCKEditor(element){
    return CKEDITOR.instances[element].getData();
}

function createTinyMceEditor(element){
    tinyMCE.remove()
    tinymce.init({
        selector: '#'+element,
        color_picker_callback: function(callback, value) {
            callback('#FF00FF');
        },
        width : '95%',
        height : 450,
        plugins: [
            'advlist autolink lists link image charmap print preview hr anchor pagebreak',
            'searchreplace wordcount visualblocks visualchars code fullscreen',
            'insertdatetime media nonbreaking save table contextmenu directionality',
            'emoticons template paste textcolor colorpicker textpattern imagetools responsivefilemanager' //responsivefilemanager to upload a file
        ],
        toolbar1: 'insertfile undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | link image | responsivefilemanager |',
        toolbar2: 'print preview media | forecolor backcolor emoticons',
        image_advtab: false,
        file_browser_callback : 'myFileBrowser',
        file_browser_callback_types: 'file image media',
        external_filemanager_path:"http://localhost:1001/",
        filemanager_title:"Responsive Filemanager" ,
        /*external_plugins: {
            "filemanager": "/libs/tinymce/js/tinymce/plugins/responsivefilemanager/plugin.min.js"
        }*/

    });
}

function readTinyMceEditor(element){
    return tinymce.get(element).getContent();
}

function httpPost(data){
    data.$http.post(data.url, data.postParam,data.onSucess,data.onError);
}

app.factory('util', ['$rootScope', function($rootScope){
    var util = {};
    util.go =  function(path){
      location.href = "#" + path;
    };
    
    util.hasPath = function(param){ 
        return location.hash.indexOf(param) != -1 ;
    };
    
    return util;
}]);
app.run(['$rootScope', '$http', 'productService','widgetService',"$uibModal", function ($rootScope, $http, productService,widgetService,$uibModal) {
    $rootScope.productCollection = [];
    $rootScope.initDone = false;
  //  productService.loadProductList();
  //  widgetService.getCategoryList();
    /*$rootScope.$watch('productCollection', function(productCollection) {
        $rootScope.productCollectionAsJson = angular.toJson(productCollection, true);
        if($rootScope.initDone) {
            productService.saveProductList();
        }
    }, true);*/

    $rootScope.currentStep=0;
    $rootScope.selectedData ={};
    $rootScope.models = {
        selected: null,
        product_allowed_types: ["widget"],
        product_steps: [],
        lists: {}       
    };
    
    /*Mock widget creation [needs to updated the model based on the real widget data]*/
  /*  $rootScope.categories=["A","B"];
    $rootScope.widgetImages=[
                        {name:"Nome e Cognome",img:"nome_cognome",catId:"A"},
                        {name:"Codice promozionale",img:"codice_promo",catId:"A"},
                        {name:"Codice fiscale ",img:"cod_fiscale",catId:"A"},
                        {name:"Email",img:"email",catId:"B"},
                        {name:"Cittadinanza",img:"city",catId:"B"},
                        
                ];
    $rootScope.createWidgetData = function(){
        var widgetImg = $rootScope.widgetImages;
        var widgetCat= $rootScope.categories;
        for(var j=0;j<widgetCat.length;j++){
             var wCat = widgetCat[j];
            $rootScope.models.lists[wCat]=[];
            for (var i = 0; i < widgetImg.length; i++) {
                var widgetId = widgetImg[i].img;
                var categoryId = widgetCat[j]+"_"+widgetId;
                var imgUrl = "source/images/"+widgetId+".JPG"
               if(widgetImg[i].catId==wCat){
                $rootScope.models.lists[wCat].push({id:widgetId, type:"widget", catId:categoryId + i, 
                                                        label: widgetImg[i].name,url:imgUrl});
               }

            }
        }
    };
    $rootScope.createWidgetData();
  */  $rootScope.createDataJson = function(obj){
        var index = $rootScope.productCollection.length-1;
        var selData = $rootScope.productCollection[index];
    
        var dataObj={};
        dataObj.id =obj.id || "";//((selData && selData.id) && (selData.id+1)) || 1 ;
        dataObj.prodCode = obj.prodCode || '';
        dataObj.name=obj.name||'';
        dataObj.version=obj.version||'';
        dataObj.descr = obj.descr ||'';
        dataObj.favorite = obj.favorite ||'';
        dataObj.numSteps = obj.numSteps ||'';
        dataObj.templateCode =obj.templateCode ||'';
        dataObj.createUser =obj.createUser||'';
        dataObj.createDate =obj.createDate ||'';
        dataObj.updateDate = obj.updateDate ||'';
        dataObj.updateUser =obj.updateUser ||'';
        dataObj.properties = obj.properties||[];
        dataObj.releases =obj.releases||[];
        dataObj.steps = obj.steps ||'';
        return dataObj;
    };
     $rootScope.widgetDataJson = function(obj){
        var dataObj={};
        dataObj.descr ="";
        dataObj.name = obj.name || '';
        dataObj.widgets=[];
         var widgetObj ={};
        widgetObj.code=obj.code||'';
        widgetObj.bundleCode = obj.bundleCode ||'';
        widgetObj.position = obj.favorite ||'';
       dataObj.widgets.push(widgetObj);

        return dataObj;
    };


    $rootScope.getSelectedData = function(isNew){
        var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
          if(prevSelect.length == 0 && !isNew &&  $rootScope.selectedData){
              return  $rootScope.selectedData;
          }
        var index = prevSelect.attr("idx");
        var obj = {};
          if(isNew){
              index = $rootScope.productCollection.length-1;

          }
          obj={'idx':index,'data':$rootScope.productCollection[index]}
        if (index && index !== -1) {
            $rootScope.selectedData =obj;
        return obj;}else{return false;}
    }

    $rootScope.go = function(path){
       location.href="#"+path;
    }

    $rootScope.setCurrentStep = function(step){
        $rootScope.currentStep = step;
    }

    $rootScope.getCurrentStep = function(){
        return($rootScope.currentStep);
    }
    
    $rootScope.proceedStep = function(id,srcpath,isView) {
        var hasPath = function(param){ return location.hash.indexOf(param) !=-1};
        $rootScope.isView = hasPath("viewWidgets") || isView;
        var selectData = $rootScope.getSelectedData() && $rootScope.getSelectedData().data || null;
        var id = id || selectData && selectData.id ||'';
        var path = '';
        if(srcpath){
            path = id && srcpath && srcpath+id ||srcpath
        }
        else{
            path = id && (hasPath("viewWidgets")  && "/viewWidgets/"+id || hasPath("editWidgets") && "/editWidgets/"+id )
            ||"/addWidgets" ||'';
            path = (isView && "/viewWidgets/" + id) || path;
        }
        if(selectData || path=="/addWidgets"){
            $rootScope.go(path +'/step:'+$rootScope.getCurrentStep());}
        else{
         $rootScope.go('/');
        }
    }
    
    
    
    $rootScope.createModel = function(tempName,controller,succClk,errClk,obj){
        var tempobj = Object.keys(obj) ;
        $rootScope[tempobj[0]] = obj[tempobj];
      $rootScope.alertInstance = $uibModal.open({
     
      templateUrl: '/acol/app/templates/'+tempName,
      controller: controller || 'alertInstanceCtrl',
      resolve: {
       obj:obj
      }
    });

    $rootScope.alertInstance.result.then(function() {
        if(succClk)succClk();
      // $uibModalInstance.close();
    }, function () {
        if(errClk) errClk();
       //  $uibModalInstance.dismiss('cancel');
    });
    }
    
}]);
 app.controller('alertInstanceCtrl', function ($scope, $uibModalInstance) {
    
    $scope.ok = function () {
      $uibModalInstance.close();
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
    });
app.config([ '$routeProvider', function($routeProvider) {
	$routeProvider.
    when('/', {
		templateUrl : 'source/templates/productlist_view.html',
		controller : 'productsCtrl'
	}).
	when('/addProduct', {
		templateUrl : 'source/templates/add_new_product.html',
		controller : 'addProductCtrl'
	}).
    when('/editWidgets/:productId/step/:currentStep', {
        templateUrl: 'source/templates/product_widgets.html',
        controller: 'addWidgetsForproductCtrl'
    }).
	when('/addWidgets/:productId/step/:currentStep', {
		templateUrl : 'source/templates/product_widgets.html',
		controller : 'addWidgetsForproductCtrl'
	}).
      when('/viewWidgets/:productId/step/:currentStep', {
        templateUrl: 'source/templates/product_widgets.html',
        controller: 'addWidgetsForproductCtrl'
    }).
	when('/ckeditor', {
        templateUrl: 'acol/app/templates/ckeditorTemplate.html',
        controller: 'htmlEditorController'
    }).
    when('/tinemceeditor', {
        templateUrl: 'acol/app/templates/tinymceeditorTemplate.html',
        controller: 'htmlEditorController'
    }).
	otherwise({
		redirectTo : '/'
	});
} ]);
app.controller('addProductCtrl', ["$scope", "$rootScope", "util","productService", function ($scope, $rootScope, util, productService) {
    //$scope.getElement =function(id){return angular.element(document.getElementById(id))};
    $scope.enableConfirm = false;
    $scope.product = {};
    $scope.doConfirm = function(product){
        var postObj = {
            "prodCode"  :product.code,
            "name"      :product.name,
            "descr"     :product.descr,
            "numSteps"  :product.step_count,
            "templateCode":product.template_code};
        var json = $scope.createDataJson(postObj);
        productService.addProduct(json, function(res) {
            var resData = res && res.data || {};
            var pid = resData && resData.data ? resData.data.id : "0";
            console.log("pid:" + pid);
            console.log("res.data:" + res.data);
            util.go("/addWidgets/"+ pid +"/step/1");
        });
        //$scope.productCollection.push(json);//
        //$scope.setCurrentStep(1);//
        //$scope.proceedStep();//
    };
}]);
app.controller('productsCtrl', ["$scope", "$route", "$routeParams","productService", "util","DTOptionsBuilder","DTColumnDefBuilder","$uibModal",
  function ($scope, $route, $routeParams, productService, util, DTOptionsBuilder, DTColumnDefBuilder,$uibModal) {
    $scope.enable_button = false;
    
    $scope.doRemoveItem = function(index) {
    //    var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
       // var index = prevSelect.attr("data-idx");
        if (index && index !== -1) {
            productService.deleteProduct(index, function(res){
            $scope.selectedData.data =  res.data.data[0];
            productService.loadProductList();
          /*  prevSelect.removeClass("stSelected");
            prevSelect.removeAttr("idx");*/
             $scope.enable_button=false;
        })}
        
     
    };
    $scope.doAddDublicate = function() {
        var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
        var index = prevSelect.attr("idx");
        if (index && index !== -1) {
            $scope.productCollection.push($scope.productCollection[index]);
        }
    };

    $scope.setselectedData = function(data){
        var idx = $scope.productCollection.indexOf(data);
        var elt = event.currentTarget;
        var angElt =angular.element(elt)
        var prevSelect= angular.element(document.getElementsByClassName("stSelected"));
        prevSelect.removeClass("stSelected");
        prevSelect.removeAttr("idx");
        if(!angElt.hasClass("stSelected")){
           angElt.addClass("stSelected");
           angElt.attr("idx",idx);
            $scope.enable_button=true;
        }
        $scope.selected = data;
    };
  
    $scope.go = function(path){
       location.href = "#"+path;
    };

    $scope.doModifyItem = function(id){
        var selectedPrdtData = $scope.selected;
        if(selectedPrdtData && selectedPrdtData.id){
            productService.doCache(null, selectedPrdtData);
            util.go("/editWidgets/"+ selectedPrdtData.id +"/step/1");
        }
    };

    $scope.doOpenItem = function(data) {
        var selectedPtd = data || $scope.selected;
        if(selectedPtd) {
            productService.doCache(null, selectedPtd);
            util.go("/viewWidgets/"+ selectedPtd.id +"/step/1");
        }
    };
    
    $scope.predicate = 'prodCode';
    $scope.reverse = false;
    $scope.order = function(predicate) {
    $scope.reverse = ($scope.predicate === predicate) ? !$scope.reverse : false;
    $scope.predicate = predicate;
  };
      productService.loadProductList();

  $scope.rowCallback= function(data) {
      $(".stSelected").removeClass("stSelected");
      $(event.currentTarget).addClass("stSelected");
       $scope.selected = data.row;
       $scope.enable_button=true;
      console.log($scope.selected);

};
$scope.doUpdateProduct =function(product){
    $scope.product = product;
    var  sucCbk = function(){
          productService.loadProductList();
    };
    var  errCbk = function(){
        $scope.alertInstance.close();
    };
    $scope.createModel('confirmAlert.html','productsCtrl',sucCbk,errCbk,{product : $scope.product});
};
  $scope.ok = function (elt) {
   
        productService.updateProduct($scope.product,function(res){ 
        $scope.alertInstance.close();
          util.go("/editWidgets/"+$scope.product.id+"/step/1" );
        })
 

  };
}]);






app.controller("addWidgetsForproductCtrl", ["$scope", "$route", "$routeParams", "$uibModal", "util", "productService","widgetService", function($scope, $route, $routeParams, $uibModal, util, productService,widgetService) {
    $scope.isView = util.hasPath("viewWidgets");
    console.log("current step:" + $routeParams.currentStep);
    console.log("current pid:" + $routeParams.productId);
    $scope.setCurrentStep = function(step){
        $scope.currentStep = step;
    };
    
    $scope.getCurrentStep = function(){
        return $scope.currentStep;
    };
    $scope.setCurrentStep($routeParams.currentStep);
    $scope.getSelectedWidgets = function(){
       
        var selectedwidgets = [];
        if($scope.selectedData) {
            var currentStep = parseInt($scope.selectedData.currentStep);
            if(!(currentStep)) {
                util.go("/");
            }
            if($scope.selectedData.data && $scope.selectedData.data.id){
        widgetService.getStepWidgets($scope.selectedData.data.id,function(res){
            console.log(" res.data ",res.data);
            var widgets = (res.data&& res.data.data && res.data.data[0] && res.data.data[0].widgets && res.data.data[0].widgets) || [] ;
            console.log("widgets ",widgets);
            /*if(widgets) {
                selectedwidgets =  widgets[$scope.selectedData.currentStep];
            }*/
            console.log('selectedwidgets ',widgets);
            selectedwidgets = (angular.isArray(widgets)) ? widgets : []
            $scope.models.product_steps = [].concat(widgets);
              },currentStep);
            }
        }

    };

    $scope.setSelectedWidgets = function(){
        var idx = parseInt($scope.selectedData.currentStep) ;
        if(idx >= 0) {
            var widgets =  $scope.selectedData.data["widgets"];
            if(!widgets) {
                $scope.selectedData.data.widgets = {};
            }
            $scope.models.product_steps = $scope.createStepJson($scope.selectedData.data.id,$scope.models.product_steps);
            $scope.selectedData.data.widgets[$scope.selectedData.currentStep] = $scope.models.product_steps;
            productService.updateProductStep($scope.selectedData.data.id, $scope.selectedData.currentStep, $scope.models.product_steps, function(res){
                //res.data[0];
            })
        }
    };
    $scope.createStepJson =  function(id,input){
        var widgets = [];
        for(i=0;i<input.length;i++){
            widgetInfo = {
                code : input[i].id || input[i].code ||'',
                bundleCode: null,
                position: 1,
                configurations: [],
                components: [],
                properties: []
            }
            widgets.push(widgetInfo);

        }

        return widgets;

    };
    $scope.getSelectedData = function(isAdd,cbk){
        productService.getProduct($routeParams.productId, true, function(res){
            $scope.selectedData = {};
            $scope.selectedData.data =  isAdd && res.data && res.data.data && res.data.data[0] || res.data && res.data.data &&            res.data.data[0] ||res.data[0] ||[];
            $scope.selectedData.currentStep =  $scope.getCurrentStep();
            $scope.getSelectedWidgets();
            console.log( $scope.models.product_steps);
            if(cbk)cbk();
        })
    };
    
    var isAdd = location.href.indexOf("addWidgets") !== -1;
    $scope.isEnableNext=false;$scope.isEnableSave=true;
    
    $scope.getSelectedData(isAdd);
    
    $scope.getCategories = function(){
        widgetService.getCategoryList(function(res){
           $scope.categories = res && res.data && res.data.data ||[];
           $scope.getWidgets();
        })
    };
     $scope.widgetList = [];
     $scope.getWidgets = function(){
         for(var i = 0; i< $scope.categories.length;i++){
             var catList = $scope.categories[i];
             var catId =catList.code;
             $scope.models.lists[catId] =new Array();
             
             widgetService.getWidgetList(catId,function(res){
                 var resWidget = res && res.data && res.data.data ||[];
                 
                  for(var j=0;j< resWidget.length;j++){
                      var imgUrl = "/acol/app/images/"+resWidget[j].code+".JPG"
                      var id = resWidget[j].code;
                      var label = resWidget[j].name;
                      var url = imgUrl;
                      var catgId = resWidget[j].category.code;

                     $scope.models.lists[catgId].push({id:id, type:"widget", catId:catgId,
                                                        label: label,url:url});

                }


            });
         }
    };
    $scope.getCategories()
    /*  $scope.widgetImages=[
                        {name:"Nome e Cognome",img:"nome_cognome",catId:"A"},
                        {name:"Codice promozionale",img:"codice_promo",catId:"A"},
                        {name:"Codice fiscale ",img:"cod_fiscale",catId:"A"},
                        {name:"Email",img:"email",catId:"B"},
                        {name:"Cittadinanza",img:"city",catId:"B"},

                ];
    $scope.createWidgetData = function(){
        var widgetImg = $scope.widgetList;
        var widgetCat= $scope.categories;
        for(var j=0;j<widgetCat.length;j++){
             var wCat = widgetCat[j];
            $scope.models.lists[wCat]=[];
            for (var i = 0; i < widgetImg.length; i++) {
                var widgetId = widgetImg[i].img;
                var categoryId = widgetCat[j]+"_"+widgetId;
                var imgUrl = "source/images/"+widgetId+".JPG"
               if(widgetImg[i].catId==wCat){
                $scope.models.lists[wCat].push({id:widgetId, type:"widget", catId:categoryId + i,
                                                        label: widgetImg[i].name,url:imgUrl});
               }

            }
        }
    };
    $scope.createWidgetData();*/


    //$scope.selectedData.currentStep = $scope.getCurrentStep();


    $scope.doNextClick = function(currentStep){
        $scope.setCurrentStep(parseInt($scope.getCurrentStep())+1);
        //$scope.proceedStep($scope.selectedData.data.id);
        var cbk = function(){
            var  path = util.hasPath("viewWidgets")  && "/viewWidgets/" || util.hasPath("editWidgets") && "/editWidgets/"||util.hasPath("addWidgets") &&"/addWidgets/" ||'';
          
            util.go(path + $scope.selectedData.data.id +"/step/" + $scope.getCurrentStep()); 
         $scope.isEnableNext =  $scope.isEnableNext;}
        if($scope.selectedData && $scope.selectedData.data){
                cbk();
        }
        else{
                $scope.getSelectedData(isAdd,cbk);
        }
         
    };
    
    $scope.doPreviousClick = function(currentStep){
          $scope.setCurrentStep(parseInt($scope.getCurrentStep())-1);                                    
       var cbk = function(){
             var  path = util.hasPath("viewWidgets")  && "/viewWidgets/" || util.hasPath("editWidgets") && "/editWidgets/"||util.hasPath("addWidgets") &&"/addWidgets/" ||'';
           
           util.go(path + $scope.selectedData.data.id +"/step/" + $scope.getCurrentStep()); }
        if($scope.selectedData && $scope.selectedData.data){
                cbk();
        }
        else{
                $scope.getSelectedData(isAdd,cbk);
        }
         //$scope.proceedStep($scope.selectedData.data.id);
    };
    
    $scope.doSaveClick = function() {
        $scope.setSelectedWidgets();
        var currentStep = parseInt($scope.getCurrentStep());
        if($scope.selectedData.data.numSteps > currentStep){
            $scope.setCurrentStep(currentStep + 1);
            //$scope.proceedStep($scope.selectedData.data.id); 
               var  path = util.hasPath("viewWidgets")  && "/viewWidgets/" || util.hasPath("editWidgets") && "/editWidgets/"||util.hasPath("addWidgets") &&"/addWidgets/" ||'';
            util.go(path + $scope.selectedData.data.id +"/step/" + $scope.getCurrentStep()); 
            $scope.isEnableNext=true;
        }
        else{
            $scope.isEnableNext=false;
            $scope.isEnableSave=false;
            util.go('/');
        }
    };
    
    $scope.doCancel = function(){
        //$scope.models.product_steps =[];
        //$scope.setSelectedWidgets();
        util.go('/');
    };   
    
/*    $scope.containsObject = function(obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (angular.equals(list[i], obj)) {
                return true;
            }
        }
        return false;
    };*/
        
    $scope.dropCallback = function(event, index, item, external, type, allowedTypes) {
        /*if($scope.models.product_steps.length){
            if($scope.containsObject(item, $scope.models.product_steps)){
                return false;
            }
        }*/
        return item;
    };
    $scope.isWidgetAdded = function(item) {
        if(item) {
            var list = $scope.models.product_steps;
            if(list && list.length){
                for (i = 0; i < list.length; i++) {
                    if (list[i] && list[i].id === item.id) {
                        item["isDisabled"] = true;
                        return true;
                    } else {
                        item["isDisabled"] = false;
                    }
                }
            }
        }
        return false;
    };
    
  $scope.animationsEnabled = true;
  $scope.isDone = false;
  $scope.pdtId = '';
  $scope.addProductProperty = function (widget) {
    $scope.pdtId =event.currentTarget.id;
    var modalInstance = $uibModal.open({
      animation: $scope.animationsEnabled,
      templateUrl: '/acol/app/templates/product_property.html',
      controller: 'ModalInstanceCtrl',
      resolve: {
        pdtId: function () {
          return $scope.pdtId;
        }
      }
    });

    modalInstance.result.then(function (pdtId) {
       widget.isDone = true;
    }, function () {
     console.log("close");
    });
  };

  $scope.toggleAnimation = function () {
    $scope.animationsEnabled = !$scope.animationsEnabled;
  };


}]);
  app.controller('ModalInstanceCtrl', function ($scope, $uibModalInstance,pdtId) {
      $scope.pdtId = pdtId;
    $scope.doClkPropertyConfirm = function (pdtId) {
      $uibModalInstance.close($scope.pdtId);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
});

app.factory('productService', ['$http', '$rootScope', function($http, $rootScope){
    var productAPI = {};
    productAPI.productTemp = null;
    productAPI.loadProductList = function(){
        return $http({
                method: 'GET',
                url: '/product'
            }).then(function successCallback(response) {
                //productAPI.doCache(response);
                productAPI.doClearCache();
                var data = response.data && response.data.data||[];
                if(data) {
                    $rootScope.productCollection = angular.isArray(data) ? data : [data];
                    $rootScope.initDone = true;
                }
            });
    };
    
    productAPI.addProduct = function(product, cbk) {
        return $http({
                method: 'POST',
                data: angular.toJson(product),
                headers: {'Content-Type': 'application/json'},
                url: '/product'
            }).then(function successCallback(response) {
                productAPI.doCache(response);
                if(cbk) { cbk(response)};
                console.log("response :" + response);
            });
    };

    productAPI.updateProductStep = function(productid, step, widgets, cbk) {
        return $http({
                method: 'POST',
            data: angular.toJson({number: step,name:"step"+step, widgets: widgets}),
                headers: {'Content-Type': 'application/json'},
                url: '/product/' + productid + '/step'
            }).then(function successCallback(response) {
                productAPI.doClearCache();
                if(cbk) { cbk(response)};
                console.log("response :" + response);
            });
    };

     productAPI.deleteProduct = function(productId,cbk) {
        return $http({
                method: 'DELETE',
                headers: {'Content-Type': 'application/json'},
                url: '/product/'+productId
            }).then(function successCallback(response) {
               if(cbk) { cbk(response)};
                console.log("response :" + response);
            });
    };

     productAPI.copyProduct = function(productId,mode,cbk) {
        return $http({
                method: 'POST',
                data: angular.toJson(product),
                headers: {'Content-Type': 'application/json'},
                url: '/product/'+product.id+'/clone/'+mode
            }).then(function successCallback(response) {
                productAPI.doCache(response);
                if(cbk) {
                    cbk(response);
                }
                console.log("response :" + response);
            });
    };

    productAPI.getProduct = function(productid, isFull, cbk) {
        if(!productAPI.getFromCache(productid, isFull, cbk)) {
            return $http({
                method: 'GET',
                headers: {'Content-Type': 'application/json'},
                url: '/product/'+productid+'?full='+(isFull || false)
            }).then(function successCallback(response) {
              //  productAPI.doCache(response);
                if(cbk) {
                    cbk(response);
                }
                console.log("response :" + response);
            });
        }
    };
    
     productAPI.updateProduct = function(product,cbk) {
        return $http({
                method: 'POST',
                data: angular.toJson(product),
                headers: {'Content-Type': 'application/json'},
                url: '/product/' + product.id
            }).then(function successCallback(response) {
               // productAPI.doClearCache();
                if(cbk) { cbk(response)};
                console.log("response :" + response);
            });
    };


    productAPI.doClearCache = function(){
        productAPI.productTemp = null;
    };

    productAPI.doCache = function(response, data) {
        productAPI.productTemp = data || (response && response.data && response.data[0]);
    };

    productAPI.getFromCache = function(productid, isFull, cbk) {
        var isAvail = false;
        if(productAPI.productTemp && productAPI.productTemp.id == productid && cbk) {
            cbk({data:[productAPI.productTemp]});
            isAvail = true;
        } 
        return isAvail; 
    };

   /* productAPI.saveProductList = function(){
        return $http({
                method: 'PUT',
                data: $rootScope.productCollectionAsJson,
                headers: {'Content-Type': 'application/json'},
                 url: '/api/product'
            }).then(function successCallback(response) {
                console.log("response :" + response);
            });
    };
    */
    return productAPI;
}]);
app.factory('widgetService', ['$http', '$rootScope', function($http, $rootScope){
    var widgetAPI = {};

    widgetAPI.getCategoryList = function(cbk){
        return $http({
                method: 'GET',
                url: '/category'
            }).then(function successCallback(response) {
            if(cbk){cbk(response);}
                var data = response.data && response.data.data||[];
                return data;
            });
    };
     widgetAPI.getWidgetList = function(category,cbk){
        return $http({
                method: 'GET',
                url: '/widget?category='+category
            }).then(function successCallback(response) {
              if(cbk){cbk(response);}
                var data = response.data && response.data.data||[];
                return data;
            });
    };
    
    widgetAPI.createStep = function(id,data, cbk) {
        return $http({
                method: 'POST',
                data: angular.toJson(data),
                headers: {'Content-Type': 'application/json'},
                url: '/product/'+id+'/step'
            }).then(function successCallback(response) {
                if(cbk) { cbk(response)};
                console.log("response :" + response);
            });
    };
    widgetAPI.getStepWidgets = function(id,cbk,step) {
        
        return $http({
                method: 'GET',
                url: '/product/'+id+'/step/'+step
            }).then(function successCallback(response) {
                if(cbk) { cbk(response)};
                console.log("response :" + response);
            });
    };


    return widgetAPI;
}]);
app.controller("htmlEditorController",['$scope','$http', function($scope,$http) {
    $scope.storeCKEditor = function(element){
        var postParam = {htmlContent : readCKEditor(element)};
        var onSuccess = function(response){
            console.log("response ",response);
        };
        var onError = function(error){
            console.log("error ",error);modes
        };
        var data = {$http:$http,url:"",postParam:postParam,onSuccess:onSuccess,onError:onError};
        httpPost(data);
    }
    $scope.storeTinymceEditor = function(element){
        var postParam = {htmlContent : readTinyMceEditor(element)};
        var onSuccess = function(response){
            console.log("response ",response);
        };
        var onError = function(error){
            console.log("error ",error);modes
        };
        var data = {$http:$http,url:"",postParam:postParam,onSuccess:onSuccess,onError:onError};
        httpPost(data);
    }
}]);

/*
app.config(['$routeProvider',
                    function($routeProvider) {
                        $routeProvider.
                        when('/ckeditor', {
                            templateUrl: 'acol/app/templates/ckeditorTemplate.html',
                            controller: 'htmlEditorController'
                        }).
                        when('/tinemceeditor', {
                            templateUrl: 'acol/app/templates/tinymceeditorTemplate.html',
                            controller: 'htmlEditorController'
                        }).
                        otherwise({
                            redirectTo: '/ckeditor'
                        });
                    }]);
*/


app.directive('ckEditor', function() {
    return {
        restrict: 'E',
        replace: true,
        transclude: true,
        controller: 'htmlEditorController',
        compile: function(element, attrs) {
            var editorHTML = '<textarea name="'+attrs.type+'" id="'+attrs.type+'"></textarea>';
            element.replaceWith(editorHTML);
            createCKEditor(attrs.type);
        }
    };
});

app.directive('tinymceEditor', function() {
    return {
        restrict: 'E',
        controller: 'htmlEditorController',
        compile: function(element, attrs) {
            var editorHTML = '<textarea name="'+attrs.type+'" id="'+attrs.type+'"></textarea>';
            element.replaceWith(editorHTML);
            createTinyMceEditor(attrs.type);

        }
    };
});

